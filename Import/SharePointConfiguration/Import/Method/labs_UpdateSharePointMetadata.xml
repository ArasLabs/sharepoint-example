<AML>
 <Item type="Method" id="AD245271C8734CD19254DE09E9AFE41A" action="add">
  <comments>Retrieves the latest metadata from SharePoint and updates the current Aras Item</comments>
  <execution_allowed_to keyed_name="Administrators" type="Identity">2618D6F5A90949BAA7E920D1B04C7EE1</execution_allowed_to>
  <method_code><![CDATA[/* 
    This method retrieves the latest metadata from the associated SharePoint 
    List Item and updates the current Aras Item's properties. The mapping
    between the SharePoint metadata and Aras Item properties is defined in
    the labs_SharePointConfiguration item.

    Most of the code in this method is based on labs_LoadSharePointDialog and
    this MS Graph API tutorial:
    https://docs.microsoft.com/en-us/azure/active-directory/develop/tutorial-v2-javascript-spa
*/

/* STEP 1 *********************************************************************
*
* Get the properties and ItemType of the current Aras Item.
*/
let thisItem = document.thisItem;
let sharepointId = thisItem.getProperty('sp_id', '');
let listId = thisItem.getProperty('sp_list_id', '');

let itemtype = aras.newIOMItem('ItemType', 'get');
itemtype.setProperty('name', thisItem.getType());
itemtype = itemtype.apply();

/* STEP 2 *********************************************************************
*
* Get the first relevant labs_SharePointConfiguration item. 
* We can figure out if/how to handle multiple configurations in a future release.
*/

let configurations = aras.newIOMItem('labs_SharePointConfiguration', 'get');
configurations.setProperty('itemtype', itemtype.getID());
configurations.createRelationship('labs_SharePointProperties', 'get');
configurations = configurations.apply();
if (configurations.isError()) {
    return configurations;
}

let config;
if (configurations.getItemCount() > 1) {
    config = configurations.getItemByIndex(0);
} else {
    config = configurations;
}

/* STEP 3 *********************************************************************
* 
* Pull SharePoint connection data out of configuration item and begin building 
* configuration object(s).
*/

let clientId = config.getProperty('client_id', '');
if (clientId === '') {
    return alert('Please configure Client ID in your SharePoint Configuration');
}

let tenantId = config.getProperty('tenant_id', '');
if (tenantId === '') {
    return alert('Please configure Tenant ID in your SharePoint Configuration');
}

let redirect = aras.getInnovatorUrl() + 'Client/scripts/blank.html'; 

// build MSAL configuration and object
var msalConfig = {
    auth: {
        clientId: clientId,
        authority: tenantId,
        redirectUri: redirect
    },
    cache: {
        cacheLocation: 'localStorage',
        storeAuthStateInCookie: true
    }
};

var myMSALObj = new Msal.UserAgentApplication(msalConfig);

// hardcoded - future TODO
// create a request object for login or token request calls
var requestObj = {
    scopes: ['user.read']
};

// build endpoints from configuration item
let graphConfig = buildSiteEndpoint(config);

/* STEP 3 *********************************************************************
*
* Prepare the DOM, set up click events, check browser version
*/

// Browser check variables
var ua = window.navigator.userAgent;
var msie = ua.indexOf('MSIE ');
var msie11 = ua.indexOf('Trident/');
var msedge = ua.indexOf('Edge/');
var isIE = msie > 0 || msie11 > 0;
var isEdge = msedge > 0;

// If you support IE, our recommendation is that you sign-in using Redirect APIs
// If you as a developer are testing using Edge InPrivate mode, 
// please add 'isEdge' to the if check

var loginType = isIE ? 'REDIRECT' : 'POPUP';
/* STEP 4 *********************************************************************
*
* Query MS Graph for the selected SharePoint List Item.
*/

if (loginType === 'POPUP') {
    // avoid duplicate code execution on page load in case of iframe and popup window.
    if (myMSALObj.getAccount()) { 
        acquireTokenPopupAndCallMSGraph(graphConfig.siteEndpoint, getListItem);
    } else {
    	signIn();
    }
} else if (loginType === 'REDIRECT') {
    console.log('IE not supported yet.');
} else {
    console.error('Please set a valid login type');
}

/**
 * This function uses the MSAL object to send a login request to MS Graph, then
 * get the available Lists for the configured SharePoint site. 
 */
function signIn() {
    myMSALObj.loginPopup(requestObj).then(function (loginResponse) {
        acquireTokenPopupAndCallMSGraph(graphConfig.siteEndpoint, getListItem);
    }).catch(function (error) {
        console.log('Error in signIn()');
        console.log(error);
    });
}

/* API REQUEST FUNCTIONS *****************************************************/

/**
 * This function sends a request to MS Graph using XMLHttpRequest, then 
 * executes the specified callback function.
 * 
 * @param theUrl MS Graph endpoint url for request
 * @param accessToken MSAL access token
 * @param callback function to execute after the request succeeds
 * @param failure (optional) function to execture if the request fails
 */
function callMSGraph(theUrl, accessToken, callback, failure) {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            var response = this.responseText;
            callback(JSON.parse(this.responseText));
        } else if (this.readyState == 4 && this.status != 200) {
            console.log('request error: ' + this.status);
            console.log(theUrl);
            if (failure) {
                failure();
            }
        }
    };
    xmlHttp.open('GET', theUrl, true); // true for asynchronous
    xmlHttp.setRequestHeader('Authorization', 'Bearer ' + accessToken);
    xmlHttp.send();
}

/**
 * This function requests an access token, calls the specified MS Graph endpoint,
 * and executes the specified callback function.
 * 
 * @param endpoint MS Graph endpoint for request
 * @param callback function to execute after the request succeeds
 * @param failure (optional) function to execture if the request fails
 */
function acquireTokenPopupAndCallMSGraph(endpoint, callback, failure) {
    // Always start with acquireTokenSilent to obtain a token in the signed in user from cache
    myMSALObj.acquireTokenSilent(requestObj).then(function (tokenResponse) {
        callMSGraph(endpoint, tokenResponse.accessToken, callback, failure);
    }).catch(function (error) {
        // Upon acquireTokenSilent failure call acquireTokenPopup(popup window) 
        if (requiresInteraction(error.errorCode)) {
            myMSALObj.acquireTokenPopup(requestObj).then(function (tokenResponse) {
                callMSGraph(endpoint, tokenResponse.accessToken, callback, failure);
            }).catch(function (error) {
                console.log(error);
            });
        }
    });
}

/**
 * This function requests the selected List Item from SharePoint, then
 * calls updateItem() to update the current Aras Item's properties.
 */
function getListItem(data) {
    if (!graphConfig.itemEndpoint) {
        buildItemEndpoint(data);
    }
    acquireTokenPopupAndCallMSGraph(graphConfig.itemEndpoint, updateItem);
}


/* CALLBACK FUNCTIONS ********************************************************/

/**
 * This function updates the current Aras Item's properties with the latest 
 * metadata from SharePoint.
 * 
 * @param data results from the getListItem() function
 */
function updateItem(data) {
    let itemTypeName = config.getPropertyAttribute('itemtype', 'keyed_name', '');
    let mappedProperties = config.getRelationships('labs_SharePointProperties');
    let needsUpdate = false;

    for (let i = 0; i < mappedProperties.getItemCount(); i++) {
        let mappedProp = mappedProperties.getItemByIndex(i);
        let arasPropName = mappedProp.getPropertyAttribute('related_id', 'keyed_name');
        let sharepointPropName = mappedProp.getProperty('sharepoint_property', '');

        if (sharepointPropName.includes('Aras sequence: ')) {
            //skip
        } else {
            // compare Aras value and SP value
            let arasValue = thisItem.getProperty(arasPropName, '');
            let sharepointValue = data.fields[sharepointPropName];

            if (arasValue != sharepointValue) {
                needsUpdate = true;
                thisItem.setProperty(arasPropName, sharepointValue);
            }
        }
    }

    if (needsUpdate) {
        thisItem.setAction('edit');

        let oldId = thisItem.getID();
        let result = thisItem.apply();

        alert('Metadata updated from SharePoint');
        aras.uiReShowItemEx(oldId, result);
    } else {
        alert('SharePoint metadata is already up to date');
    }
}


/* HELPER FUNCTIONS **********************************************************/

/**
 * This function builds the endpoint url for the configured SharePoint site.
 * 
 * @param config the selected labs_SharePointConfig item
 * @returns an object where obj.siteEndpoint is the site url
 */
function buildSiteEndpoint(config) {
    // site url should look like https://{host}/sites/{name}
    let site = config.getProperty('sharepoint_site', '');
    let urlParts = site.replace('https://', '').split('/');
    let host = urlParts[0];
    let name = urlParts[2];

    // the site endpoint will look like https://graph.microsoft.com/v1.0/sites/{site host}:/sites/{site name}
    let siteEndpoint = 'https://graph.microsoft.com/v1.0/sites/' + host + ':/sites/' + name;

    let graphConfig = {
        siteEndpoint: siteEndpoint
    };

    return graphConfig;
}

/**
 * This function builds the endpoint url for the selected SharePoint List Item, then
 * adds the url to the graphConfig object's itemEndpoint property.
 * 
 * @param data results from the getSharePointLists() function
 */
function buildItemEndpoint(data) {
    // get site id from the parameter
    let siteId = data.id;
    let itemEndpoint = 'https://graph.microsoft.com/v1.0/sites/' + siteId + '/lists/' + listId + '/items/' + sharepointId;
    graphConfig.itemEndpoint = itemEndpoint;
    // getListItem();
}

/**
 * This function determines whether we need to call the login popup.
 * 
 * @param errorCode error code returned in the event myMSALObj.acquireTokenSilent() fails
 */
function requiresInteraction(errorCode) {
    if (!errorCode || !errorCode.length) {
        return false;
    }
    return errorCode === 'consent_required' ||
        errorCode === 'interaction_required' ||
        errorCode === 'login_required';
}
]]></method_code>
  <method_type>JavaScript</method_type>
  <name>labs_UpdateSharePointMetadata</name>
 </Item>
</AML>