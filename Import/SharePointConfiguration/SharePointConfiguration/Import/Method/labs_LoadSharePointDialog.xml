<AML>
 <Item type="Method" id="CE389BAC9474499787F19D828FB99D95" action="add">
  <comments>Populates a dialog with SharePoint data, allows the user to choose an item to link to Aras</comments>
  <execution_allowed_to keyed_name="Administrators" type="Identity">2618D6F5A90949BAA7E920D1B04C7EE1</execution_allowed_to>
  <method_code><![CDATA[/*
    This method populates a dialog with SharePoint data based on the properties 
    of a labs_SharePointConfiguration item. The dialog allows the user to login
    to SharePoint, choose a List, and select a List Item that is then used to 
    create a new Aras Item. The mapping between the SharePoint item's metadata
    and the Aras Item's properties is defined by the labs_SharePointConfiguration.

    The code for retrieving access tokens and querying the MS Graph API for 
    SharePoint data is based on this tutorial: 
    https://docs.microsoft.com/en-us/azure/active-directory/develop/tutorial-v2-javascript-spa
*/

let args = parent.frameElement.dialogArguments;
if (!args.itemTypeId) {
    return alert('Please pass in the itemtype id argument.');
}

/* STEP 1 *********************************************************************
*
* Get the first relevant labs_SharePointConfiguration item. 
* We can figure out if/how to handle multiple configurations in a future release.
*/

let configurations = aras.newIOMItem('labs_SharePointConfiguration', 'get');
configurations.setProperty('mapped_itemtype', args.itemTypeId);
configurations = configurations.apply();
if (configurations.isError()) {
    return configurations;
}

let config;
if (configurations.getItemCount() > 1) {
    config = configurations.getItemByIndex(0);
} else {
    config = configurations;
}

/* STEP 2 *********************************************************************
* 
* Pull SharePoint connection data out of configuration item and begin building 
* configuration object(s).
*/

let clientId = config.getProperty('client_id', '');
if (clientId === '') {
    return alert('Please configure Client ID in your SharePoint Configuration');
}

let tenantId = config.getProperty('tenant_id', '');
if (tenantId === '') {
    return alert('Please configure Tenant ID in your SharePoint Configuration');
}

let redirect = aras.getInnovatorUrl() + 'Client/scripts/blank.html'; 

// build MSAL configuration and object
var msalConfig = {
    auth: {
        clientId: clientId,
        authority: tenantId,
        redirectUri: redirect
    },
    cache: {
        cacheLocation: 'localStorage',
        storeAuthStateInCookie: true
    }
};

var myMSALObj = new Msal.UserAgentApplication(msalConfig);

// hardcoded - future TODO
// create a request object for login or token request calls
var requestObj = {
    scopes: ['user.read']
};

// build endpoints from configuration item
let graphConfig = buildSiteEndpoint(config);

/* STEP 3 *********************************************************************
*
* Prepare the DOM, set up click events, check browser version
*/

document.selectedSharePointConfig = config.getID();
document.getElementById('signInButton').addEventListener('click', signIn);
document.getElementById('submitButton').addEventListener('click', submit);

// disable the dropdown field until the list is populated
var input = getFieldByName('sharepoint_lists');
input.getElementsByTagName('input')[0].disabled = true;
input.getElementsByTagName('button')[0].disabled = true;

// Browser check variables
var ua = window.navigator.userAgent;
var msie = ua.indexOf('MSIE ');
var msie11 = ua.indexOf('Trident/');
var msedge = ua.indexOf('Edge/');
var isIE = msie > 0 || msie11 > 0;
var isEdge = msedge > 0;

// If you support IE, our recommendation is that you sign-in using Redirect APIs
// If you as a developer are testing using Edge InPrivate mode, 
// please add 'isEdge' to the if check

var loginType = isIE ? 'REDIRECT' : 'POPUP';

/* STEP 4 *********************************************************************
*
* Get MSAL access token and query the SharePoint Site Lists if the login is cached.
* If not, the user will need to click the login button to begin.
*/

if (loginType === 'POPUP') {
    // avoid duplicate code execution on page load in case of iframe and popup window.
    if (myMSALObj.getAccount() && aras.loggedIntoSharePoint) { 
        updateSignInButton();
        acquireTokenPopupAndCallMSGraph(graphConfig.siteEndpoint, getSharePointLists);
    } else if (myMSALObj.getAccount() && !aras.loggedIntoSharePoint) {
       signOut();
    }
} else if (loginType === 'REDIRECT') {
    console.log('IE not supported yet.');
} else {
    console.error('Please set a valid login type');
}


/* BUTTON CLICK EVENTS *******************************************************/

/**
 * This function uses the MSAL object to send a login request to MS Graph, then
 * get the available Lists for the configured SharePoint site. 
 */
function signIn() {
    myMSALObj.loginPopup(requestObj).then(function (loginResponse) {
        aras.loggedIntoSharePoint = true;
        updateSignInButton();
        acquireTokenPopupAndCallMSGraph(graphConfig.siteEndpoint, getSharePointLists);
    }).catch(function (error) {
        console.log('Error in signIn()');
        console.log(error);
    });
}

/**
 * This function uses the MSAL object to logout from MS Graph.
 */
function signOut() {
    myMSALObj.logout();
    parent.close();
}

/**
 * This function retrieves the selected SharePoint data from the DOM, then
 * returns the data to the calling client method and closes the dialog.
 */
function submit() {
    if (!document.selectedSharePointItem) {
        return alert('Please select a SharePoint item from the table.');    
    }
    
    let result = {
        list: document.selectedSharePointList,
        item: document.selectedSharePointItem,
        config: document.selectedSharePointConfig
    };
    parent.returnValue = result;
    parent.close();
}


/* API REQUEST FUNCTIONS *****************************************************/

/**
 * This function sends a request to MS Graph using XMLHttpRequest, then 
 * executes the specified callback function.
 * 
 * @param theUrl MS Graph endpoint url for request
 * @param accessToken MSAL access token
 * @param callback function to execute after the request succeeds
 * @param failure (optional) function to execture if the request fails
 */
function callMSGraph(theUrl, accessToken, callback, failure) {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            var response = this.responseText;
            callback(JSON.parse(this.responseText));
        } else if (this.readyState == 4 && this.status != 200) {
            console.log('request error: ' + this.status);
            console.log(theUrl);
            if (failure) {
                failure();
            }
        }
    };
    xmlHttp.open('GET', theUrl, true); // true for asynchronous
    xmlHttp.setRequestHeader('Authorization', 'Bearer ' + accessToken);
    xmlHttp.send();
}

/**
 * This function requests an access token, calls the specified MS Graph endpoint,
 * and executes the specified callback function.
 * 
 * @param endpoint MS Graph endpoint for request
 * @param callback function to execute after the request succeeds
 * @param failure (optional) function to execture if the request fails
 */
function acquireTokenPopupAndCallMSGraph(endpoint, callback, failure) {
    // Always start with acquireTokenSilent to obtain a token in the signed in user from cache
    myMSALObj.acquireTokenSilent(requestObj).then(function (tokenResponse) {
        callMSGraph(endpoint, tokenResponse.accessToken, callback, failure);
    }).catch(function (error) {
        // Upon acquireTokenSilent failure call acquireTokenPopup(popup window) 
        if (requiresInteraction(error.errorCode)) {
            myMSALObj.acquireTokenPopup(requestObj).then(function (tokenResponse) {
                callMSGraph(endpoint, tokenResponse.accessToken, callback, failure);
            }).catch(function (error) {
                console.log(error);
            });
        }
    });
}

/**
 * This function requests all of the Lists for the configured SharePoint site,
 * then calls displaySharePointLists() to populate the dropdown list in the dialog.
 */
function getSharePointLists(data) {
    if (!graphConfig.siteListEndpoint) {
        buildSiteListEndpoint(data);
    }
    acquireTokenPopupAndCallMSGraph(graphConfig.siteListEndpoint, displaySharePointLists);
}

/**
 * This function stores the id of the selected SharePoint List to the DOM, then
 * queries MS Graph for the select List's List Items and calls displaySharePointListItems()
 * to populate the table of items in the dialog.
 */
function getSharePointListItems() {
    let listId = this.value;
    document.selectedSharePointList = listId;
    // reset the selected list item in case we're switching lists
    document.selectedSharePointItem = undefined;
    let listItemsEndpoint = graphConfig.siteListEndpoint + '/' + listId + '/items?$expand=fields';
    acquireTokenPopupAndCallMSGraph(listItemsEndpoint, displaySharePointListItems, clearListItemTable);
}

/**
 * This function queries MS Graph for the selected List Item, then
 * calls selectSharePointListItem to handle the dialog changes.
 */
function getOneSharePointListItem() {
    let listId = document.selectedSharePointList;
    let listItemId = this.getAttribute('list_item_id');
    let listItemEndpoint = graphConfig.siteListEndpoint + '/' + listId + '/items/' + listItemId;
    acquireTokenPopupAndCallMSGraph(listItemEndpoint, selectSharePointListItem);
}


/* CALLBACK FUNCTIONS ********************************************************/

/**
 * This function adds each SharePoint List to the sharepoint_lists dropdown field
 * on the dialog form. Each entry has a focusout event to get the List Items for
 * the selected List and populate the result table on the form.
 * 
 * The code for populating the dropdown list with typeahead capability is based on 
 * this Aras Labs blog post: 
 * https://community.aras.com/b/english/posts/tech-tip-dynamically-change-type-ahead-english
 * 
 * @param data results from the getSharePointLists() function
 */
function displaySharePointLists(data) {
    // enable the dropdown field - it's disabled by default
    var input = getFieldByName('sharepoint_lists');
    input.getElementsByTagName('input')[0].disabled = false;
    input.getElementsByTagName('button')[0].disabled = false;
    
    // populate list
    var dropdown = getFieldComponentByName('sharepoint_lists');

    listOfValues = [{
        label: '',
        value: ''
    }];
    
    // clear list then populate, in case we're repopulating
    dropdown.component.setState({ list: listOfValues });

    let listData = data.value;
    listData.forEach(function (el) {
        listOfValues.push({
            label: el.name,
            value: el.id
        });
    });

    document.sharePointListMap = listOfValues;
    dropdown.component.setState({ list: listOfValues });
    document.querySelector("input[name='sharepoint_lists']").addEventListener('focusout', getSharePointListItems);
}

/**
 * This function populates the table on the dialog form with the List Items
 * from the selected SharePoint List. Each row has a click event to query
 * MS Graph for the item's metadata.
 * 
 * @param data results from the getSharePointListItems() function
 */
function displaySharePointListItems(data) {
    // clear table then populate, in case we're repopulating
    clearListItemTable();
    
    let listData = data.value;
    let listTable = document.querySelector('#sharepointItemTable tbody');

    listData.forEach(function (el) {
        let tr = document.createElement('tr');
        let td_id = document.createElement('td');
        td_id.appendChild(document.createTextNode(el.id));

        let td_name = document.createElement('td');
        td_name.appendChild(document.createTextNode(el.fields.Title));

        tr.setAttribute('list_item_id', el.id);
        tr.addEventListener('click', getOneSharePointListItem);
        tr.appendChild(td_id);
        tr.appendChild(td_name);
        listTable.appendChild(tr);
    });
}

/**
 * This function clears the contents of the list items table in the dialog.
 */
function clearListItemTable() {
    let listTable = document.querySelector('#sharepointItemTable tbody');
    while (listTable.firstChild) {
        listTable.removeChild(listTable.firstChild);
    }
}

/**
 * This function sets the style of the selected List Item and stores the 
 * SharePoint metadata to the DOM.
 * 
 * @param data results from the getOneSharePointListItem() function
 */
function selectSharePointListItem(data) {
    // if the selected row is already selected, we want to deselect it
    if ((document.selectedSharePointItem) && (document.selectedSharePointItem.fields.id == data.fields.id)) {
        let selected_tr = document.querySelector("tr[list_item_id='" + data.fields.id + "']");
        selected_tr.classList = '';
        document.selectedSharePointItem = undefined;
        return;
    }
    
    // reset all rows
    let all_trs = document.querySelectorAll("tr[list_item_id]");
    all_trs.forEach(function(element){
        element.classList = '';
    });
    
    // set class on selected row
    let selected_tr = document.querySelector("tr[list_item_id='" + data.fields.id + "']");
    selected_tr.classList = 'selectedItemRow';
    document.selectedSharePointItem = data;
}


/* HELPER FUNCTIONS **********************************************************/

/**
 * This function changes the sign in button text to "sign out", then
 * updates the click event to logout the user.
 */
function updateSignInButton() {
    var loginbutton = document.getElementById('signInButton');
    loginbutton.innerHTML = 'Sign Out';
    loginbutton.removeEventListener('click', signIn);
    loginbutton.addEventListener('click', signOut);
}

/**
 * This function changes the sign out button text to "sign in", then
 * updates the click event to login the user.
 */
function updateSignOutButton() {
    var loginbutton = document.getElementById('signInButton');
    loginbutton.innerHTML = 'Sign In';
    loginbutton.removeEventListener('click', signOut);
    loginbutton.addEventListener('click', signIn);
}

/**
 * This function builds the endpoint url for the configured SharePoint site.
 * 
 * @param config the selected labs_SharePointConfig item
 * @returns an object where obj.siteEndpoint is the site url
 */
function buildSiteEndpoint(config) {
    // site url should look like https://{host}/sites/{name}
    let site = config.getProperty('sharepoint_site', '');
    let urlParts = site.replace('https://', '').split('/');
    let host = urlParts[0];
    let name = urlParts[2];

    // the site endpoint will look like https://graph.microsoft.com/v1.0/sites/{site host}:/sites/{site name}
    let siteEndpoint = 'https://graph.microsoft.com/v1.0/sites/' + host + ':/sites/' + name;

    let graphConfig = {
        siteEndpoint: siteEndpoint
    };

    return graphConfig;
}

/**
 * This function builds the endpoint url for the selected SharePoint List, then
 * adds the url to the graphConfig object's siteListEndpoint property.
 * 
 * @param data results from teh getSharePointLists() function
 */
function buildSiteListEndpoint(data) {
    let siteId = data.id;
    let siteListEndpoint = 'https://graph.microsoft.com/v1.0/sites/' + siteId + '/lists';
    graphConfig.siteListEndpoint = siteListEndpoint;
}

/**
 * This function determines whether we need to call the login popup.
 * 
 * @param errorCode error code returned in the event myMSALObj.acquireTokenSilent() fails
 */
function requiresInteraction(errorCode) {
    if (!errorCode || !errorCode.length) {
        return false;
    }
    return errorCode === 'consent_required' ||
        errorCode === 'interaction_required' ||
        errorCode === 'login_required';
}]]></method_code>
  <method_type>JavaScript</method_type>
  <name>labs_LoadSharePointDialog</name>
 </Item>
</AML>